### Quick Start API Tests - Art Gallery (No Auth Required)
### All APIs are now publicly accessible

### Base URL and Variables
@baseUrl = http://localhost:8000
@testUserId = 1

### ==============================================
### STEP 1: Public Endpoints (No Auth Required)
### ==============================================

### 1. API Health Check
GET {{baseUrl}}/

### 2. Get all users
GET {{baseUrl}}/users/

### 3. Get specific user profile
GET {{baseUrl}}/users/{{testUserId}}

### 4. Get all categories
GET {{baseUrl}}/categories/

### 5. Create a category (no auth required)
POST {{baseUrl}}/categories/
Content-Type: application/json

{
  "name": "Abstract Art",
  "description": "Abstract artworks that challenge conventional representation"
}

### 6. Get all paintings
GET {{baseUrl}}/paintings/

### 7. Get paintings by specific user
GET {{baseUrl}}/paintings/user/{{testUserId}}

### 8. Update user profile (no auth required - pass user_id)
PUT {{baseUrl}}/users/{{testUserId}}
Content-Type: application/json

{
  "full_name": "Updated Test Artist",
  "email": "updated@example.com",
  "bio": "Updated bio for testing",
  "user_id": {{testUserId}}
}

### ==============================================
### STEP 2: Advanced Testing
### ==============================================

### 9. Create a painting (artist functionality)
POST {{baseUrl}}/paintings/
Content-Type: application/json

{
  "title": "Test Painting",
  "description": "A beautiful test painting",
  "price": 1500.00,
  "category_id": 1,
  "artist_id": {{testUserId}},
  "image_url": "https://example.com/test-painting.jpg"
}

### 10. Get user statistics
GET {{baseUrl}}/users/{{testUserId}}/stats

### 11. API Documentation (Swagger UI)
GET {{baseUrl}}/docs

### 12. Alternative API Documentation (ReDoc)
GET {{baseUrl}}/redoc

### ==============================================
### STEP 3: Ratings and Comments Testing
### ==============================================

### 13. Get ratings for a painting
GET {{baseUrl}}/ratings/painting/1

### 14. Create/Update a rating
POST {{baseUrl}}/ratings/?user_id={{testUserId}}
Content-Type: application/json

{
  "painting_id": 1,
  "rating": 5
}

### 15. Get user's rating for a painting
GET {{baseUrl}}/ratings/user/{{testUserId}}/painting/1

### 16. Get comments for a painting
GET {{baseUrl}}/comments/painting/1

### 17. Create a comment
POST {{baseUrl}}/comments/?user_id={{testUserId}}
Content-Type: application/json

{
  "painting_id": 1,
  "content": "Beautiful artwork! Love the color composition."
}

### ==============================================
### INSTRUCTIONS:
### ==============================================

### HOW TO USE:
### 1. Start your FastAPI server: uvicorn app.main:app --reload
### 2. Run any test - no authentication required!
### 3. All APIs are publicly accessible
### 4. Use user_id parameter where needed (e.g., user_id=1 for first user)

### SIMPLIFIED AUTHENTICATION:
### - No tokens or login required
### - All endpoints are public
### - Frontend handles role-based UI simulation
### - Backend APIs accept user_id as parameter

### FOR VS CODE USERS:
### Install the "REST Client" extension to run these tests directly in VS Code
### Each ### separates individual requests

### FRONTEND TESTING:
### 1. Start frontend: npm start
### 2. Use demo accounts:
###    - Artist: admin (real database user with paintings)
###    - Enthusiast: art_lover (can rate and comment on paintings)
### 3. Click any demo account to login instantly
### 4. All API limits are now set to max 50 items per request
